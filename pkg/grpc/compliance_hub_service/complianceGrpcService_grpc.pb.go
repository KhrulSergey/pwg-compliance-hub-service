// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.2
// source: internal/grpc/proto/complianceGrpcService.proto

package compliance_hub_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ComplianceGrpcService_CheckCompliance_FullMethodName = "/compliance_service.ComplianceGrpcService/CheckCompliance"
)

// ComplianceGrpcServiceClient is the client API for ComplianceGrpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ComplianceGrpcServiceClient interface {
	CheckCompliance(ctx context.Context, in *ComplianceCheckRequestRpc, opts ...grpc.CallOption) (*ComplianceCheckShortResponseRpc, error)
}

type complianceGrpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewComplianceGrpcServiceClient(cc grpc.ClientConnInterface) ComplianceGrpcServiceClient {
	return &complianceGrpcServiceClient{cc}
}

func (c *complianceGrpcServiceClient) CheckCompliance(ctx context.Context, in *ComplianceCheckRequestRpc, opts ...grpc.CallOption) (*ComplianceCheckShortResponseRpc, error) {
	out := new(ComplianceCheckShortResponseRpc)
	err := c.cc.Invoke(ctx, ComplianceGrpcService_CheckCompliance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComplianceGrpcServiceServer is the server API for ComplianceGrpcService service.
// All implementations must embed UnimplementedComplianceGrpcServiceServer
// for forward compatibility
type ComplianceGrpcServiceServer interface {
	CheckCompliance(context.Context, *ComplianceCheckRequestRpc) (*ComplianceCheckShortResponseRpc, error)
	mustEmbedUnimplementedComplianceGrpcServiceServer()
}

// UnimplementedComplianceGrpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedComplianceGrpcServiceServer struct {
}

func (UnimplementedComplianceGrpcServiceServer) CheckCompliance(context.Context, *ComplianceCheckRequestRpc) (*ComplianceCheckShortResponseRpc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCompliance not implemented")
}
func (UnimplementedComplianceGrpcServiceServer) mustEmbedUnimplementedComplianceGrpcServiceServer() {}

// UnsafeComplianceGrpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComplianceGrpcServiceServer will
// result in compilation errors.
type UnsafeComplianceGrpcServiceServer interface {
	mustEmbedUnimplementedComplianceGrpcServiceServer()
}

func RegisterComplianceGrpcServiceServer(s grpc.ServiceRegistrar, srv ComplianceGrpcServiceServer) {
	s.RegisterService(&ComplianceGrpcService_ServiceDesc, srv)
}

func _ComplianceGrpcService_CheckCompliance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComplianceCheckRequestRpc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceGrpcServiceServer).CheckCompliance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceGrpcService_CheckCompliance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceGrpcServiceServer).CheckCompliance(ctx, req.(*ComplianceCheckRequestRpc))
	}
	return interceptor(ctx, in, info, handler)
}

// ComplianceGrpcService_ServiceDesc is the grpc.ServiceDesc for ComplianceGrpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ComplianceGrpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "compliance_service.ComplianceGrpcService",
	HandlerType: (*ComplianceGrpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckCompliance",
			Handler:    _ComplianceGrpcService_CheckCompliance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/grpc/proto/complianceGrpcService.proto",
}
